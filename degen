// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract CustomTokenV4 is ERC20, Ownable, ERC20Burnable {
    event PlayerRewarded(address indexed player, uint256 rewardItemize);
    event ItemRedeemed(address indexed player, string item, uint256 cost);
    event PlayerBalanceChecked(address indexed player, uint256 balance);

    enum BonusProduct {
        Speaker,
        Alexa,
        Laptop,
        MaxBonusProduct
    }

    mapping(BonusProduct => uint256) private productCosts;
    mapping(BonusProduct => string) private productNames;

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) ERC20Burnable() {
        uint256 initialSupply = 100;
        address initialOwner = msg.sender;

        _mint(initialOwner, initialSupply);

        productCosts[BonusProduct.Speaker] = 20;
        productCosts[BonusProduct.Alexa] = 30;
        productCosts[BonusProduct.Laptop] = 40;

        productNames[BonusProduct.Speaker] = "Speaker";
        productNames[BonusProduct.Alexa] = "Alexa";
        productNames[BonusProduct.Laptop] = "Laptop";
    }

    function mint_FN(address to, uint256 itemize) external onlyOwner {
        _mint(to, itemize);
    }

    function Transfer_FN(address devisee, uint256 itemize) external {
        _transfer(msg.sender, devisee, itemize);
    }

    function burn_FN(uint256 itemize) public  {
        _burn(msg.sender, itemize);
    }

    function redeemBonusProduct(BonusProduct bonusProduct) external {
        require(bonusProduct < BonusProduct.MaxBonusProduct, "Invalid bonus product");

        uint256 tokensToBurn = productCosts[bonusProduct];
        require(tokensToBurn > 0, "Invalid bonus product");

        require(balanceOf(msg.sender) >= tokensToBurn, "Not enough funds");

        _burn(msg.sender, tokensToBurn);
        emit ItemRedeemed(msg.sender, productNames[bonusProduct], tokensToBurn);
    }

    function checkPlayerBalance(address player) external view returns (uint256) {
        return balanceOf(player);
    }

    function getRewardCost(BonusProduct bonusProduct) external view returns (uint256) {
        return productCosts[bonusProduct];
    }
}
