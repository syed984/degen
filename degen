// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract DegenToken is ERC20, Ownable, ERC20Burnable {
    event PlayerRewarded(address indexed player, uint256 rewardItemize);
    event ItemRedeemed(address indexed player, string item, uint256 cost);
    event PlayerBalanceChecked(address indexed player, uint256 balance);

    enum BonusProduct {
        EarlyAccess,
        VIPMembership,
        Smartphone,
        MaxBonusProduct
    }

    mapping(BonusProduct => uint256) private productCosts;
    mapping(BonusProduct => string) private productNames;

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) ERC20Burnable() {
        uint256 initialSupply = 100;
        address initialOwner = msg.sender;

        _mint(initialOwner, initialSupply);

        productCosts[BonusProduct.EarlyAccess] = 250;
        productCosts[BonusProduct.VIPMembership] = 300;
        productCosts[BonusProduct.Smartphone] = 200;

        productNames[BonusProduct.EarlyAccess] = "Early Access";
        productNames[BonusProduct.VIPMembership] = "VIP Membership";
        productNames[BonusProduct.Smartphone] = "Smartphone";
    }

    function mintTokens(address devisee, uint256 itemSize) external onlyOwner {
        _mint(devisee, itemSize);
    }

    function transferTokens(address devisee, uint256 itemSize) external {
        _transfer(msg.sender, devisee, itemSize);
    }

    function burnTokens(uint256 itemSize) public {
        _burn(msg.sender, itemSize);
    }

    function redeemBonusProduct(BonusProduct bonusProduct) external {
        require(bonusProduct < BonusProduct.MaxBonusProduct, "Invalid bonus product");

        uint256 tokensToBurn = productCosts[bonusProduct];
        require(tokensToBurn > 0, "Invalid bonus product");

        require(balanceOf(msg.sender) >= tokensToBurn, "Not enough funds");

        _burn(msg.sender, tokensToBurn);
        emit ItemRedeemed(msg.sender, productNames[bonusProduct], tokensToBurn);
    }

    function checkPlayerBalance(address player) external view returns (uint256) {
        return balanceOf(player);
    }

    function getRewardCost(BonusProduct bonusProduct) external view returns (uint256) {
        return productCosts[bonusProduct];
    }
}
